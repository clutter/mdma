# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `marcel` gem.
# Please instead update this file by running `bin/tapioca gem marcel`.

# source://marcel//lib/marcel.rb#1
module Marcel; end

# source://marcel//lib/marcel/mime_type.rb#1
class Marcel::MimeType
  class << self
    # source://marcel//lib/marcel/mime_type.rb#5
    def extend(type, extensions: T.unsafe(nil), parents: T.unsafe(nil), magic: T.unsafe(nil)); end

    # source://marcel//lib/marcel/mime_type.rb#15
    def for(pathname_or_io = T.unsafe(nil), name: T.unsafe(nil), extension: T.unsafe(nil), declared_type: T.unsafe(nil)); end

    private

    # source://marcel//lib/marcel/mime_type.rb#27
    def for_data(pathname_or_io); end

    # source://marcel//lib/marcel/mime_type.rb#53
    def for_declared_type(declared_type); end

    # source://marcel//lib/marcel/mime_type.rb#45
    def for_extension(extension); end

    # source://marcel//lib/marcel/mime_type.rb#37
    def for_name(name); end

    # For some document types (notably Microsoft Office) we recognise the main content
    # type with magic, but not the specific subclass. In this situation, if we can get a more
    # specific class using either the name or declared_type, we should use that in preference
    #
    # source://marcel//lib/marcel/mime_type.rb#80
    def most_specific_type(from_magic_type, fallback_type); end

    # source://marcel//lib/marcel/mime_type.rb#70
    def parse_media_type(content_type); end

    # source://marcel//lib/marcel/mime_type.rb#88
    def root_types(type); end

    # source://marcel//lib/marcel/mime_type.rb#61
    def with_io(pathname_or_io, &block); end
  end
end

# source://marcel//lib/marcel/mime_type.rb#2
Marcel::MimeType::BINARY = T.let(T.unsafe(nil), String)

# source://marcel//lib/marcel/version.rb#2
Marcel::VERSION = T.let(T.unsafe(nil), String)
