# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jmespath` gem.
# Please instead update this file by running `bin/tapioca gem jmespath`.

# source://jmespath//lib/jmespath.rb#5
module JMESPath
  class << self
    # @api private
    #
    # source://jmespath//lib/jmespath.rb#36
    def load_json(path); end

    # @param expression [String] A valid
    #   [JMESPath](https://github.com/boto/jmespath) expression.
    # @param data [Hash]
    # @return [Mixed, nil] Returns the matched values. Returns `nil` if the
    #   expression does not resolve inside `data`.
    #
    # source://jmespath//lib/jmespath.rb#25
    def search(expression, data, runtime_options = T.unsafe(nil)); end
  end
end

# source://jmespath//lib/jmespath/caching_parser.rb#4
class JMESPath::CachingParser
  # @return [CachingParser] a new instance of CachingParser
  #
  # source://jmespath//lib/jmespath/caching_parser.rb#6
  def initialize(options = T.unsafe(nil)); end

  # source://jmespath//lib/jmespath/caching_parser.rb#12
  def parse(expression); end

  private

  # source://jmespath//lib/jmespath/caching_parser.rb#22
  def cache_expression(expression); end
end

# source://jmespath//lib/jmespath/errors.rb#2
module JMESPath::Errors; end

# source://jmespath//lib/jmespath/errors.rb#4
class JMESPath::Errors::Error < ::StandardError; end

# source://jmespath//lib/jmespath/errors.rb#14
class JMESPath::Errors::InvalidArityError < ::JMESPath::Errors::Error; end

# source://jmespath//lib/jmespath/errors.rb#10
class JMESPath::Errors::InvalidTypeError < ::JMESPath::Errors::Error; end

# source://jmespath//lib/jmespath/errors.rb#12
class JMESPath::Errors::InvalidValueError < ::JMESPath::Errors::Error; end

# source://jmespath//lib/jmespath/errors.rb#6
class JMESPath::Errors::RuntimeError < ::JMESPath::Errors::Error; end

# source://jmespath//lib/jmespath/errors.rb#8
class JMESPath::Errors::SyntaxError < ::JMESPath::Errors::Error; end

# source://jmespath//lib/jmespath/errors.rb#16
class JMESPath::Errors::UnknownFunctionError < ::JMESPath::Errors::Error; end

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#6
class JMESPath::Lexer
  # @api private
  # @param expression [String<JMESPath>]
  # @return [Array<Hash>]
  #
  # source://jmespath//lib/jmespath/lexer.rb#163
  def tokenize(expression); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/lexer.rb#278
  def inside(chars, delim, type); end

  # @api private
  #
  # source://jmespath//lib/jmespath/lexer.rb#269
  def match_or(chars, current, expected, type, or_type); end

  # @api private
  #
  # source://jmespath//lib/jmespath/lexer.rb#349
  def parse_json(token, quoted = T.unsafe(nil)); end

  class << self
    # Certain versions of Ruby and of the pure_json gem not support loading
    # scalar JSON values, such a numbers, booleans, strings, etc. These
    # simple values must be first wrapped inside a JSON object before calling
    # `JSON.load`.
    #
    #    # works in most JSON versions, raises in some versions
    #    JSON.load("true")
    #    JSON.load("123")
    #    JSON.load("\"abc\"")
    #
    # This is an known issue for:
    #
    # * Ruby 1.9.3 bundled v1.5.5 of json; Ruby 1.9.3 defaults to bundled
    #   version despite newer versions being available.
    #
    # * json_pure v2.0.0+
    #
    # It is not possible to change the version of JSON loaded in the
    # user's application. Adding an explicit dependency on json gem
    # causes issues in environments that cannot compile the gem. We previously
    # had a direct dependency on `json_pure`, but this broke with the v2 update.
    #
    # This method allows us to detect how the `JSON.load` behaves so we know
    # if we have to wrap scalar JSON values to parse them or not.
    #
    # @api private
    # @return [Boolean]
    #
    # source://jmespath//lib/jmespath/lexer.rb#323
    def requires_wrapping?; end
  end
end

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#363
class JMESPath::Lexer::CharacterStream
  # @api private
  # @return [CharacterStream] a new instance of CharacterStream
  #
  # source://jmespath//lib/jmespath/lexer.rb#365
  def initialize(chars); end

  # @api private
  #
  # source://jmespath//lib/jmespath/lexer.rb#370
  def current; end

  # @api private
  #
  # source://jmespath//lib/jmespath/lexer.rb#374
  def next; end

  # @api private
  #
  # source://jmespath//lib/jmespath/lexer.rb#379
  def position; end
end

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#146
JMESPath::Lexer::NUMBERS = T.let(T.unsafe(nil), Set)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#148
JMESPath::Lexer::SIMPLE_TOKENS = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#47
JMESPath::Lexer::STATE_AND = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#45
JMESPath::Lexer::STATE_EQ = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#44
JMESPath::Lexer::STATE_GT = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#34
JMESPath::Lexer::STATE_IDENTIFIER = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#40
JMESPath::Lexer::STATE_JSON_LITERAL = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#41
JMESPath::Lexer::STATE_LBRACKET = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#43
JMESPath::Lexer::STATE_LT = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#46
JMESPath::Lexer::STATE_NOT = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#35
JMESPath::Lexer::STATE_NUMBER = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#42
JMESPath::Lexer::STATE_PIPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#39
JMESPath::Lexer::STATE_QUOTED_STRING = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#36
JMESPath::Lexer::STATE_SINGLE_CHAR = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#38
JMESPath::Lexer::STATE_STRING_LITERAL = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#37
JMESPath::Lexer::STATE_WHITESPACE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#49
JMESPath::Lexer::TRANSLATION_TABLE = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#27
JMESPath::Lexer::T_AND = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#11
JMESPath::Lexer::T_COLON = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#10
JMESPath::Lexer::T_COMMA = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#32
JMESPath::Lexer::T_COMPARATOR = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#12
JMESPath::Lexer::T_CURRENT = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#8
JMESPath::Lexer::T_DOT = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#31
JMESPath::Lexer::T_EOF = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#13
JMESPath::Lexer::T_EXPREF = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#29
JMESPath::Lexer::T_FILTER = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#20
JMESPath::Lexer::T_FLATTEN = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#21
JMESPath::Lexer::T_IDENTIFIER = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#16
JMESPath::Lexer::T_LBRACE = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#18
JMESPath::Lexer::T_LBRACKET = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#30
JMESPath::Lexer::T_LITERAL = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#14
JMESPath::Lexer::T_LPAREN = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#28
JMESPath::Lexer::T_NOT = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#22
JMESPath::Lexer::T_NUMBER = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#26
JMESPath::Lexer::T_OR = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#25
JMESPath::Lexer::T_PIPE = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#23
JMESPath::Lexer::T_QUOTED_IDENTIFIER = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#17
JMESPath::Lexer::T_RBRACE = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#19
JMESPath::Lexer::T_RBRACKET = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#15
JMESPath::Lexer::T_RPAREN = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#9
JMESPath::Lexer::T_STAR = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#24
JMESPath::Lexer::T_UNKNOWN = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://jmespath//lib/jmespath/lexer.rb#140
JMESPath::Lexer::VALID_IDENTIFIERS = T.let(T.unsafe(nil), Set)

# @api private
#
# source://jmespath//lib/jmespath/nodes.rb#3
module JMESPath::Nodes; end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#83
class JMESPath::Nodes::AbsFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#86
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/and.rb#3
class JMESPath::Nodes::And < ::JMESPath::Nodes::Node
  # @api private
  # @return [And] a new instance of And
  #
  # source://jmespath//lib/jmespath/nodes/and.rb#5
  def initialize(left, right); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/and.rb#19
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/and.rb#10
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/projection.rb#46
class JMESPath::Nodes::ArrayProjection < ::JMESPath::Nodes::Projection
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#47
  def extract_targets(target); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#55
  def fast_instance; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#100
class JMESPath::Nodes::AvgFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#103
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#124
class JMESPath::Nodes::CeilFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#127
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/subexpression.rb#37
class JMESPath::Nodes::Chain
  # @api private
  # @return [Chain] a new instance of Chain
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#38
  def initialize(children); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#48
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#42
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/field.rb#39
class JMESPath::Nodes::ChainedField < ::JMESPath::Nodes::Field
  # @api private
  # @return [ChainedField] a new instance of ChainedField
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#40
  def initialize(keys); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#65
  def chain(other); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#49
  def visit(obj); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#71
  def keys; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#4
class JMESPath::Nodes::Comparator < ::JMESPath::Nodes::Node
  # @api private
  # @return [Comparator] a new instance of Comparator
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#7
  def initialize(left, right); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#5
  def left; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#30
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#5
  def right; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#26
  def visit(value); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#36
  def check(left_value, right_value); end

  class << self
    # @api private
    #
    # source://jmespath//lib/jmespath/nodes/comparator.rb#12
    def create(relation, left, right); end
  end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#28
class JMESPath::Nodes::ComparatorCondition < ::JMESPath::Nodes::Node
  # @api private
  # @return [ComparatorCondition] a new instance of ComparatorCondition
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#31
  def initialize(left, right, child); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#37
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#29
JMESPath::Nodes::ComparatorCondition::COMPARATOR_TO_CONDITION = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#41
module JMESPath::Nodes::Comparators; end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#43
class JMESPath::Nodes::Comparators::Eq < ::JMESPath::Nodes::Comparator
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#44
  def check(left_value, right_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#55
class JMESPath::Nodes::Comparators::Gt < ::JMESPath::Nodes::Comparator
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#56
  def check(left_value, right_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#65
class JMESPath::Nodes::Comparators::Gte < ::JMESPath::Nodes::Comparator
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#66
  def check(left_value, right_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#75
class JMESPath::Nodes::Comparators::Lt < ::JMESPath::Nodes::Comparator
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#76
  def check(left_value, right_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#85
class JMESPath::Nodes::Comparators::Lte < ::JMESPath::Nodes::Comparator
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#86
  def check(left_value, right_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/comparator.rb#49
class JMESPath::Nodes::Comparators::Neq < ::JMESPath::Nodes::Comparator
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/comparator.rb#50
  def check(left_value, right_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#490
module JMESPath::Nodes::CompareBy
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#493
  def compare_by(mode, *args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#4
class JMESPath::Nodes::Condition < ::JMESPath::Nodes::Node
  # @api private
  # @return [Condition] a new instance of Condition
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#5
  def initialize(test, child); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#18
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#10
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#141
class JMESPath::Nodes::ContainsFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#144
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/current.rb#4
class JMESPath::Nodes::Current < ::JMESPath::Nodes::Node
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/current.rb#5
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#544
class JMESPath::Nodes::EndsWithFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#549
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#42
class JMESPath::Nodes::EqCondition < ::JMESPath::Nodes::ComparatorCondition
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#49
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#45
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/expression.rb#4
class JMESPath::Nodes::Expression < ::JMESPath::Nodes::Node
  # @api private
  # @return [Expression] a new instance of Expression
  #
  # source://jmespath//lib/jmespath/nodes/expression.rb#7
  def initialize(expression); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/expression.rb#15
  def eval(value); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/expression.rb#5
  def expression; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/expression.rb#19
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/expression.rb#11
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/projection.rb#60
class JMESPath::Nodes::FastArrayProjection < ::JMESPath::Nodes::ArrayProjection
  include ::JMESPath::Nodes::FastProjector
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/projection.rb#78
class JMESPath::Nodes::FastObjectProjection < ::JMESPath::Nodes::ObjectProjection
  include ::JMESPath::Nodes::FastProjector
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/projection.rb#38
module JMESPath::Nodes::FastProjector
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#39
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/field.rb#4
class JMESPath::Nodes::Field < ::JMESPath::Nodes::Node
  # @api private
  # @return [Field] a new instance of Field
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#5
  def initialize(key); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#28
  def chain(other); end

  # @api private
  # @return [Boolean]
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#24
  def chains_with?(other); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#10
  def visit(value); end

  protected

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/field.rb#34
  def keys; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/flatten.rb#4
class JMESPath::Nodes::Flatten < ::JMESPath::Nodes::Node
  # @api private
  # @return [Flatten] a new instance of Flatten
  #
  # source://jmespath//lib/jmespath/nodes/flatten.rb#5
  def initialize(child); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/flatten.rb#24
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/flatten.rb#9
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#159
class JMESPath::Nodes::FloorFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#162
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#4
class JMESPath::Nodes::Function < ::JMESPath::Nodes::Node
  # @api private
  # @return [Function] a new instance of Function
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#8
  def initialize(children, options = T.unsafe(nil)); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#26
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#22
  def visit(value); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#46
  def call(args); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#40
  def maybe_raise(error_type, message); end

  class << self
    # @api private
    #
    # source://jmespath//lib/jmespath/nodes/function.rb#14
    def create(name, children, options = T.unsafe(nil)); end
  end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#6
JMESPath::Nodes::Function::FUNCTIONS = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#30
class JMESPath::Nodes::Function::FunctionName
  # @api private
  # @return [FunctionName] a new instance of FunctionName
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#33
  def initialize(name); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#31
  def name; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#96
class JMESPath::Nodes::GtCondition < ::JMESPath::Nodes::ComparatorCondition
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#99
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#106
class JMESPath::Nodes::GteCondition < ::JMESPath::Nodes::ComparatorCondition
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#109
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/index.rb#4
JMESPath::Nodes::Index = JMESPath::Nodes::Field

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#339
class JMESPath::Nodes::JoinFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#342
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#299
class JMESPath::Nodes::KeysFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#302
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#176
class JMESPath::Nodes::LengthFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#179
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/literal.rb#4
class JMESPath::Nodes::Literal < ::JMESPath::Nodes::Node
  # @api private
  # @return [Literal] a new instance of Literal
  #
  # source://jmespath//lib/jmespath/nodes/literal.rb#7
  def initialize(value); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/literal.rb#5
  def value; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/literal.rb#11
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#58
class JMESPath::Nodes::LiteralRightEqCondition < ::JMESPath::Nodes::EqCondition
  # @api private
  # @return [LiteralRightEqCondition] a new instance of LiteralRightEqCondition
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#59
  def initialize(left, right, child); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#64
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#85
class JMESPath::Nodes::LiteralRightNeqCondition < ::JMESPath::Nodes::NeqCondition
  # @api private
  # @return [LiteralRightNeqCondition] a new instance of LiteralRightNeqCondition
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#86
  def initialize(left, right, child); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#91
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#116
class JMESPath::Nodes::LtCondition < ::JMESPath::Nodes::ComparatorCondition
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#119
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#126
class JMESPath::Nodes::LteCondition < ::JMESPath::Nodes::ComparatorCondition
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#129
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#192
class JMESPath::Nodes::Map < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#196
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#524
class JMESPath::Nodes::MaxByFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker
  include ::JMESPath::Nodes::CompareBy

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#529
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#215
class JMESPath::Nodes::MaxFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#220
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#596
class JMESPath::Nodes::MergeFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#599
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#534
class JMESPath::Nodes::MinByFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker
  include ::JMESPath::Nodes::CompareBy

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#539
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#250
class JMESPath::Nodes::MinFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#255
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#4
class JMESPath::Nodes::MultiSelectHash < ::JMESPath::Nodes::Node
  # @api private
  # @return [MultiSelectHash] a new instance of MultiSelectHash
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#5
  def initialize(kv_pairs); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#19
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#9
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#23
class JMESPath::Nodes::MultiSelectHash::KeyValuePair
  # @api private
  # @return [KeyValuePair] a new instance of KeyValuePair
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#26
  def initialize(key, value); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#24
  def key; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#31
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_hash.rb#24
  def value; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/multi_select_list.rb#4
class JMESPath::Nodes::MultiSelectList < ::JMESPath::Nodes::Node
  # @api private
  # @return [MultiSelectList] a new instance of MultiSelectList
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_list.rb#5
  def initialize(children); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_list.rb#17
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/multi_select_list.rb#9
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/condition.rb#69
class JMESPath::Nodes::NeqCondition < ::JMESPath::Nodes::ComparatorCondition
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#76
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/condition.rb#72
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes.rb#4
class JMESPath::Nodes::Node
  # @api private
  # @return [Boolean]
  #
  # source://jmespath//lib/jmespath/nodes.rb#16
  def chains_with?(other); end

  # @api private
  # @return [Boolean]
  #
  # source://jmespath//lib/jmespath/nodes.rb#8
  def hash_like?(value); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes.rb#12
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes.rb#5
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/not.rb#3
class JMESPath::Nodes::Not < ::JMESPath::Nodes::Node
  # @api private
  # @return [Not] a new instance of Not
  #
  # source://jmespath//lib/jmespath/nodes/not.rb#5
  def initialize(expression); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/not.rb#13
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/not.rb#9
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#407
class JMESPath::Nodes::NotNullFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#410
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/projection.rb#64
class JMESPath::Nodes::ObjectProjection < ::JMESPath::Nodes::Projection
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#65
  def extract_targets(target); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#73
  def fast_instance; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/or.rb#4
class JMESPath::Nodes::Or < ::JMESPath::Nodes::Node
  # @api private
  # @return [Or] a new instance of Or
  #
  # source://jmespath//lib/jmespath/nodes/or.rb#5
  def initialize(left, right); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/or.rb#19
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/or.rb#10
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/pipe.rb#4
JMESPath::Nodes::Pipe = JMESPath::Nodes::Subexpression

# @api private
#
# source://jmespath//lib/jmespath/nodes/projection.rb#4
class JMESPath::Nodes::Projection < ::JMESPath::Nodes::Node
  # @api private
  # @return [Projection] a new instance of Projection
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#5
  def initialize(target, projection); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#23
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#10
  def visit(value); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/projection.rb#33
  def extract_targets(left_value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#610
class JMESPath::Nodes::ReverseFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#613
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/slice.rb#77
class JMESPath::Nodes::SimpleSlice < ::JMESPath::Nodes::Slice
  # @api private
  # @return [SimpleSlice] a new instance of SimpleSlice
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#78
  def initialize(start, stop); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#82
  def visit(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/slice.rb#4
class JMESPath::Nodes::Slice < ::JMESPath::Nodes::Node
  # @api private
  # @raise [Errors::InvalidValueError]
  # @return [Slice] a new instance of Slice
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#5
  def initialize(start, stop, step); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#35
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#12
  def visit(value); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#64
  def adjust_endpoint(length, endpoint, step); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/slice.rb#45
  def adjust_slice(length, start, stop, step); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#454
class JMESPath::Nodes::SortByFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#459
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#419
class JMESPath::Nodes::SortFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#424
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#570
class JMESPath::Nodes::StartsWithFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#575
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/subexpression.rb#4
class JMESPath::Nodes::Subexpression < ::JMESPath::Nodes::Node
  # @api private
  # @return [Subexpression] a new instance of Subexpression
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#5
  def initialize(left, right); end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#14
  def optimize; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#10
  def visit(value); end

  protected

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#22
  def flatten; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#20
  def left; end

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/subexpression.rb#20
  def right; end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#389
class JMESPath::Nodes::SumFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#392
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#628
class JMESPath::Nodes::ToArrayFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#631
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#372
class JMESPath::Nodes::ToNumberFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#375
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#359
class JMESPath::Nodes::ToStringFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#362
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#51
module JMESPath::Nodes::TypeChecker
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#52
  def get_type(value); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#64
JMESPath::Nodes::TypeChecker::ARRAY_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#65
JMESPath::Nodes::TypeChecker::BOOLEAN_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#66
JMESPath::Nodes::TypeChecker::EXPRESSION_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#67
JMESPath::Nodes::TypeChecker::NULL_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#68
JMESPath::Nodes::TypeChecker::NUMBER_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#69
JMESPath::Nodes::TypeChecker::OBJECT_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#70
JMESPath::Nodes::TypeChecker::STRING_TYPE = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#72
JMESPath::Nodes::TypeChecker::TYPE_NAMES = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#285
class JMESPath::Nodes::TypeFunction < ::JMESPath::Nodes::Function
  include ::JMESPath::Nodes::TypeChecker

  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#290
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/nodes/function.rb#320
class JMESPath::Nodes::ValuesFunction < ::JMESPath::Nodes::Function
  # @api private
  #
  # source://jmespath//lib/jmespath/nodes/function.rb#323
  def call(args); end
end

# @api private
#
# source://jmespath//lib/jmespath/parser.rb#5
class JMESPath::Parser
  # @api private
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Parser] a new instance of Parser
  #
  # source://jmespath//lib/jmespath/parser.rb#30
  def initialize(options = T.unsafe(nil)); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#48
  def method_missing(method_name, *args); end

  # @api private
  # @param expression [String<JMESPath>]
  #
  # source://jmespath//lib/jmespath/parser.rb#36
  def parse(expression); end

  private

  # @api private
  # @param stream [TokenStream]
  # @param rbp [Integer] Right binding power
  #
  # source://jmespath//lib/jmespath/parser.rb#60
  def expr(stream, rbp = T.unsafe(nil)); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#234
  def led_and(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#162
  def led_comparator(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#169
  def led_dot(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#179
  def led_filter(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#192
  def led_flatten(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#199
  def led_lbracket(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#210
  def led_lparen(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#228
  def led_or(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#240
  def led_pipe(stream, left); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#68
  def nud_current(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#73
  def nud_expref(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#93
  def nud_filter(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#97
  def nud_flatten(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#101
  def nud_identifier(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#111
  def nud_lbrace(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#125
  def nud_lbracket(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#137
  def nud_literal(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#83
  def nud_lparen(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#78
  def nud_not(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#143
  def nud_quoted_identifier(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#154
  def nud_star(stream); end

  # @api private
  # @raise [Errors::SyntaxError]
  #
  # source://jmespath//lib/jmespath/parser.rb#158
  def nud_unknown(stream); end

  # parse array index expressions, for example [0], [1:2:3], etc.
  #
  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#247
  def parse_array_index_expression(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#278
  def parse_dot(stream, binding_power); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#287
  def parse_key_value_pair(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#294
  def parse_multi_select_list(stream); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#309
  def parse_projection(stream, binding_power); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#323
  def parse_wildcard_array(stream, left = T.unsafe(nil)); end

  # @api private
  #
  # source://jmespath//lib/jmespath/parser.rb#331
  def parse_wildcard_object(stream, left = T.unsafe(nil)); end
end

# @api private
#
# source://jmespath//lib/jmespath/parser.rb#7
JMESPath::Parser::AFTER_DOT = T.let(T.unsafe(nil), Set)

# @api private
#
# source://jmespath//lib/jmespath/parser.rb#22
JMESPath::Parser::COLON_RBRACKET = T.let(T.unsafe(nil), Set)

# @api private
#
# source://jmespath//lib/jmespath/parser.rb#27
JMESPath::Parser::CURRENT_NODE = T.let(T.unsafe(nil), JMESPath::Nodes::Current)

# @api private
#
# source://jmespath//lib/jmespath/parser.rb#16
JMESPath::Parser::NUM_COLON_RBRACKET = T.let(T.unsafe(nil), Set)

# @api private
#
# source://jmespath//lib/jmespath/runtime.rb#3
class JMESPath::Runtime
  # Constructs a new runtime object for evaluating JMESPath expressions.
  #
  #     runtime = JMESPath::Runtime.new
  #     runtime.search(expression, data)
  #     #=> ...
  #
  # ## Caching
  #
  # When constructing a {Runtime}, the default parser caches expressions.
  # This significantly speeds up calls to {#search} multiple times
  # with the same expression but different data. To disable caching, pass
  # `:cache_expressions => false` to the constructor or pass a custom
  # `:parser`.
  #
  # @api private
  # @example Re-use a Runtime, caching enabled by default
  #
  #   runtime = JMESPath::Runtime.new
  #   runtime.parser
  #   #=> #<JMESPath::CachingParser ...>
  # @example Disable caching
  #
  #   runtime = JMESPath::Runtime.new(cache_expressions: false)
  #   runtime.parser
  #   #=> #<JMESPath::Parser ...>
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Runtime] a new instance of Runtime
  #
  # source://jmespath//lib/jmespath/runtime.rb#45
  def initialize(options = T.unsafe(nil)); end

  # @api private
  # @return [Parser, CachingParser]
  #
  # source://jmespath//lib/jmespath/runtime.rb#50
  def parser; end

  # @api private
  # @param expression [String<JMESPath>]
  # @param data [Hash]
  # @return [Mixed, nil]
  #
  # source://jmespath//lib/jmespath/runtime.rb#55
  def search(expression, data); end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/runtime.rb#62
  def default_parser(options); end
end

# @api private
#
# source://jmespath//lib/jmespath/runtime.rb#6
JMESPath::Runtime::DEFAULT_PARSER = JMESPath::CachingParser

# @api private
#
# source://jmespath//lib/jmespath/token.rb#3
class JMESPath::Token < ::Struct
  # @api private
  # @param type [Symbol]
  # @param value [Mixed]
  # @param position [Integer]
  # @return [Token] a new instance of Token
  #
  # source://jmespath//lib/jmespath/token.rb#37
  def initialize(type, value, position); end
end

# @api private
#
# source://jmespath//lib/jmespath/token.rb#7
JMESPath::Token::BINDING_POWER = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://jmespath//lib/jmespath/token.rb#5
JMESPath::Token::NULL_TOKEN = T.let(T.unsafe(nil), JMESPath::Token)

# @api private
#
# source://jmespath//lib/jmespath/token_stream.rb#3
class JMESPath::TokenStream
  # @api private
  # @param expression [String<JMESPath>]
  # @param tokens [Array<Token>]
  # @return [TokenStream] a new instance of TokenStream
  #
  # source://jmespath//lib/jmespath/token_stream.rb#7
  def initialize(expression, tokens); end

  # @api private
  # @return [String<JMESPath>]
  #
  # source://jmespath//lib/jmespath/token_stream.rb#16
  def expression; end

  # @api private
  #
  # source://jmespath//lib/jmespath/token_stream.rb#35
  def inspect; end

  # @api private
  #
  # source://jmespath//lib/jmespath/token_stream.rb#30
  def lookahead(count); end

  # @api private
  # @option options
  # @param options [Hash] a customizable set of options
  #
  # source://jmespath//lib/jmespath/token_stream.rb#26
  def next(options = T.unsafe(nil)); end

  # @api private
  # @return [Integer]
  #
  # source://jmespath//lib/jmespath/token_stream.rb#22
  def position; end

  # @api private
  # @return [Token]
  #
  # source://jmespath//lib/jmespath/token_stream.rb#19
  def token; end

  private

  # @api private
  #
  # source://jmespath//lib/jmespath/token_stream.rb#46
  def _next; end

  # @api private
  #
  # source://jmespath//lib/jmespath/token_stream.rb#51
  def validate_match(token, match); end
end

# @api private
#
# source://jmespath//lib/jmespath/util.rb#3
module JMESPath::Util
  class << self
    # Determines if a value is false as defined by JMESPath:
    #
    #   https://github.com/jmespath/jmespath.site/blob/master/docs/proposals/improved-filters.rst#and-expressions-1
    #
    # @api private
    # @return [Boolean]
    #
    # source://jmespath//lib/jmespath/util.rb#10
    def falsey?(value); end
  end
end

# source://jmespath//lib/jmespath/version.rb#2
JMESPath::VERSION = T.let(T.unsafe(nil), String)
