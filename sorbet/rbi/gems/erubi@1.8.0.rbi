# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `erubi` gem.
# Please instead update this file by running `bin/tapioca gem erubi`.

# source://erubi//lib/erubi.rb#3
module Erubi
  class << self
    # source://erubi//lib/erubi.rb#24
    def h(value); end
  end
end

# source://erubi//lib/erubi.rb#42
class Erubi::Engine
  # Initialize a new Erubi::Engine.  Options:
  # :bufval :: The value to use for the buffer variable, as a string.
  # :bufvar :: The variable name to use for the buffer variable, as a string.
  # :ensure :: Wrap the template in a begin/ensure block restoring the previous value of bufvar.
  # :escapefunc :: The function to use for escaping, as a string (default: ::Erubi.h).
  # :escape :: Whether to make <%= escape by default, and <%== not escape by default.
  # :escape_html :: Same as :escape, with lower priority.
  # :filename :: The filename for the template.
  # :freeze :: Whether to enable frozen string literals in the resulting source code.
  # :outvar :: Same as bufvar, with lower priority.
  # :postamble :: The postamble for the template, by default returns the resulting source code.
  # :preamble :: The preamble for the template, by default initializes up the buffer variable.
  # :regexp :: The regexp to use for scanning.
  # :src :: The initial value to use for the source code
  # :trim :: Whether to trim leading and trailing whitespace, true by default.
  #
  # @return [Engine] a new instance of Engine
  #
  # source://erubi//lib/erubi.rb#67
  def initialize(input, properties = T.unsafe(nil)); end

  # The variable name used for the buffer variable.
  #
  # source://erubi//lib/erubi.rb#50
  def bufvar; end

  # The filename of the template, if one was given.
  #
  # source://erubi//lib/erubi.rb#47
  def filename; end

  # The frozen ruby source code generated from the template, which can be evaled.
  #
  # source://erubi//lib/erubi.rb#44
  def src; end

  private

  # Add ruby code to the template
  #
  # source://erubi//lib/erubi.rb#175
  def add_code(code); end

  # Add the given ruby expression result to the template,
  # escaping it based on the indicator given and escape flag.
  #
  # source://erubi//lib/erubi.rb#182
  def add_expression(indicator, code); end

  # Add the result of Ruby expression to the template
  #
  # source://erubi//lib/erubi.rb#191
  def add_expression_result(code); end

  # Add the escaped result of Ruby expression to the template
  #
  # source://erubi//lib/erubi.rb#196
  def add_expression_result_escaped(code); end

  # Add the given postamble to the src.  Can be overridden in subclasses
  # to make additional changes to src that depend on the current state.
  #
  # source://erubi//lib/erubi.rb#202
  def add_postamble(postamble); end

  # Add raw text to the template
  #
  # source://erubi//lib/erubi.rb#170
  def add_text(text); end

  # Raise an exception, as the base engine class does not support handling other indicators.
  #
  # @raise [ArgumentError]
  #
  # source://erubi//lib/erubi.rb#207
  def handle(indicator, code, tailch, rspace, lspace); end
end

# source://erubi//lib/erubi.rb#5
Erubi::RANGE_ALL = T.let(T.unsafe(nil), Range)

# :nocov:
#
# source://erubi//lib/erubi.rb#8
Erubi::RANGE_FIRST = T.let(T.unsafe(nil), Integer)

# source://erubi//lib/erubi.rb#9
Erubi::RANGE_LAST = T.let(T.unsafe(nil), Integer)

# source://erubi//lib/erubi.rb#10
Erubi::TEXT_END = T.let(T.unsafe(nil), String)

# source://erubi//lib/erubi.rb#4
Erubi::VERSION = T.let(T.unsafe(nil), String)
