# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mini_mime` gem.
# Please instead update this file by running `bin/tapioca gem mini_mime`.

# source://mini_mime//lib/mini_mime/version.rb#1
module MiniMime
  class << self
    # source://mini_mime//lib/mini_mime.rb#13
    def lookup_by_content_type(mime); end

    # source://mini_mime//lib/mini_mime.rb#9
    def lookup_by_extension(extension); end

    # source://mini_mime//lib/mini_mime.rb#5
    def lookup_by_filename(filename); end
  end
end

# source://mini_mime//lib/mini_mime.rb#17
module MiniMime::Configuration
  class << self
    # Returns the value of attribute content_type_db_path.
    #
    # source://mini_mime//lib/mini_mime.rb#20
    def content_type_db_path; end

    # Sets the attribute content_type_db_path
    #
    # @param value the value to set the attribute content_type_db_path to.
    #
    # source://mini_mime//lib/mini_mime.rb#20
    def content_type_db_path=(_arg0); end

    # Returns the value of attribute ext_db_path.
    #
    # source://mini_mime//lib/mini_mime.rb#19
    def ext_db_path; end

    # Sets the attribute ext_db_path
    #
    # @param value the value to set the attribute ext_db_path to.
    #
    # source://mini_mime//lib/mini_mime.rb#19
    def ext_db_path=(_arg0); end
  end
end

# source://mini_mime//lib/mini_mime.rb#51
class MiniMime::Db
  # @return [Db] a new instance of Db
  #
  # source://mini_mime//lib/mini_mime.rb#153
  def initialize; end

  # source://mini_mime//lib/mini_mime.rb#162
  def lookup_by_content_type(content_type); end

  # source://mini_mime//lib/mini_mime.rb#158
  def lookup_by_extension(extension); end

  class << self
    # source://mini_mime//lib/mini_mime.rb#69
    def lookup_by_content_type(content_type); end

    # source://mini_mime//lib/mini_mime.rb#62
    def lookup_by_extension(extension); end

    # source://mini_mime//lib/mini_mime.rb#54
    def lookup_by_filename(filename); end
  end
end

# source://mini_mime//lib/mini_mime.rb#76
class MiniMime::Db::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://mini_mime//lib/mini_mime.rb#77
  def initialize(size); end

  # source://mini_mime//lib/mini_mime.rb#82
  def []=(key, val); end

  # source://mini_mime//lib/mini_mime.rb#88
  def fetch(key, &blk); end
end

# source://mini_mime//lib/mini_mime.rb#52
MiniMime::Db::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://mini_mime//lib/mini_mime.rb#93
class MiniMime::Db::RandomAccessDb
  # @return [RandomAccessDb] a new instance of RandomAccessDb
  #
  # source://mini_mime//lib/mini_mime.rb#96
  def initialize(path, sort_order); end

  # source://mini_mime//lib/mini_mime.rb#110
  def lookup(val); end

  # lifted from marcandre/backports
  #
  # source://mini_mime//lib/mini_mime.rb#126
  def lookup_uncached(val); end

  # source://mini_mime//lib/mini_mime.rb#147
  def resolve(row); end
end

# source://mini_mime//lib/mini_mime.rb#94
MiniMime::Db::RandomAccessDb::MAX_CACHED = T.let(T.unsafe(nil), Integer)

# source://mini_mime//lib/mini_mime.rb#27
class MiniMime::Info
  # @return [Info] a new instance of Info
  #
  # source://mini_mime//lib/mini_mime.rb#32
  def initialize(buffer); end

  # source://mini_mime//lib/mini_mime.rb#36
  def [](idx); end

  # @return [Boolean]
  #
  # source://mini_mime//lib/mini_mime.rb#46
  def binary?; end

  # Returns the value of attribute content_type.
  #
  # source://mini_mime//lib/mini_mime.rb#30
  def content_type; end

  # Sets the attribute content_type
  #
  # @param value the value to set the attribute content_type to.
  #
  # source://mini_mime//lib/mini_mime.rb#30
  def content_type=(_arg0); end

  # Returns the value of attribute encoding.
  #
  # source://mini_mime//lib/mini_mime.rb#30
  def encoding; end

  # Sets the attribute encoding
  #
  # @param value the value to set the attribute encoding to.
  #
  # source://mini_mime//lib/mini_mime.rb#30
  def encoding=(_arg0); end

  # Returns the value of attribute extension.
  #
  # source://mini_mime//lib/mini_mime.rb#30
  def extension; end

  # Sets the attribute extension
  #
  # @param value the value to set the attribute extension to.
  #
  # source://mini_mime//lib/mini_mime.rb#30
  def extension=(_arg0); end
end

# source://mini_mime//lib/mini_mime.rb#28
MiniMime::Info::BINARY_ENCODINGS = T.let(T.unsafe(nil), Array)

# source://mini_mime//lib/mini_mime/version.rb#2
MiniMime::VERSION = T.let(T.unsafe(nil), String)
