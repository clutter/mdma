# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yt-support` gem.
# Please instead update this file by running `bin/tapioca gem yt-support`.

# An object-oriented Ruby client for YouTube.
#
# @see http://www.rubydoc.info/gems/yt/
#
# source://yt-support//lib/yt/configuration.rb#1
module Yt
  extend ::Yt::Config
end

# Provides methods to read and write global configuration settings.
#
# A typical usage is to set the API keys retrieved from the
# {http://console.developers.google.com Google Developers Console}.
#
# Note that Yt.configure has precedence over values through with
# environment variables (see {Yt::Models::Configuration}).
#
# @example Set the API key for a server-only YouTube app:
#   Yt.configure do |config|
#   config.api_key = 'ABCDEFGHIJ1234567890'
#   end
# @example Set the API client id/secret for a web-client YouTube app:
#   Yt.configure do |config|
#   config.client_id = 'ABCDEFGHIJ1234567890'
#   config.client_secret = 'ABCDEFGHIJ1234567890'
#   end
#
# source://yt-support//lib/yt/config.rb#25
module Yt::Config
  # Returns the global {Yt::Models::Configuration} object.
  #
  # While this method _can_ be used to read and write configuration settings,
  # it is easier to use {Yt::Config#configure} Yt.configure}.
  #
  # @example
  #   Yt.configuration.api_key = 'ABCDEFGHIJ1234567890'
  # @return [Yt::Models::Configuration] The global configuration.
  #
  # source://yt-support//lib/yt/config.rb#47
  def configuration; end

  # Yields the global configuration to the given block.
  #
  # @example
  #   Yt.configure do |config|
  #   config.api_key = 'ABCDEFGHIJ1234567890'
  #   end
  # @yield [Yt::Models::Configuration] The global configuration.
  #
  # source://yt-support//lib/yt/config.rb#34
  def configure; end
end

# Provides an object to store global configuration settings.
#
# This class is typically not used directly, but by calling
# {Yt::Config#configure Yt.configure}, which creates and updates a single
# instance of {Yt::Models::Configuration}.
#
# An alternative way to set global configuration settings is by storing
# them in the following environment variables:
#
# * +YT_CLIENT_ID+ to store the Client ID for web/device apps
# * +YT_CLIENT_SECRET+ to store the Client Secret for web/device apps
# * +YT_API_KEY+ to store the API key for server/browser apps
# * +YT_LOG_LEVEL+ to store the verbosity level of the logs
#
# In case both methods are used together,
# {Yt::Config#configure Yt.configure} takes precedence.
#
# @example Set the API client id/secret for a web-client YouTube app:
#   Yt.configure do |config|
#   config.client_id = 'ABCDEFGHIJ1234567890'
#   config.client_secret = 'ABCDEFGHIJ1234567890'
#   end
# @example Set the API client id/secret for a web-client YouTube app:
#   ENV['YT_CLIENT_ID'] = 'ABCDEFGHIJ1234567890'
#   ENV['YT_CLIENT_SECRET'] = 'ABCDEFGHIJ1234567890'
# @see Yt::Config for more examples.
#
# source://yt-support//lib/yt/configuration.rb#31
class Yt::Configuration
  # Initialize the global configuration settings, using the values of
  # the specified following environment variables by default.
  #
  # @return [Configuration] a new instance of Configuration
  #
  # source://yt-support//lib/yt/configuration.rb#55
  def initialize; end

  # @return [String] the access token to act on behalf of a YouTube account.
  #
  # source://yt-support//lib/yt/configuration.rb#48
  def access_token; end

  # @return [String] the access token to act on behalf of a YouTube account.
  #
  # source://yt-support//lib/yt/configuration.rb#48
  def access_token=(_arg0); end

  # @return [String] the API key for server/browser YouTube applications.
  # @see https://console.developers.google.com Google Developers Console
  #
  # source://yt-support//lib/yt/configuration.rb#42
  def api_key; end

  # @return [String] the API key for server/browser YouTube applications.
  # @see https://console.developers.google.com Google Developers Console
  #
  # source://yt-support//lib/yt/configuration.rb#42
  def api_key=(_arg0); end

  # @return [String] the Client ID for web/device YouTube applications.
  # @see https://console.developers.google.com Google Developers Console
  #
  # source://yt-support//lib/yt/configuration.rb#34
  def client_id; end

  # @return [String] the Client ID for web/device YouTube applications.
  # @see https://console.developers.google.com Google Developers Console
  #
  # source://yt-support//lib/yt/configuration.rb#34
  def client_id=(_arg0); end

  # @return [String] the Client Secret for web/device YouTube applications.
  # @see https://console.developers.google.com Google Developers Console
  #
  # source://yt-support//lib/yt/configuration.rb#38
  def client_secret; end

  # @return [String] the Client Secret for web/device YouTube applications.
  # @see https://console.developers.google.com Google Developers Console
  #
  # source://yt-support//lib/yt/configuration.rb#38
  def client_secret=(_arg0); end

  # @return [Boolean] whether the logging output is verbose.
  #   Useful when debugging (e.g., to print the curl of failing requests).
  #
  # source://yt-support//lib/yt/configuration.rb#70
  def debugging?; end

  # @return [Boolean] whether the logging output is extra-verbose.
  #   Useful when developing (e.g., to print the curl of every request).
  #
  # source://yt-support//lib/yt/configuration.rb#64
  def developing?; end

  # @return [String] the level of output to print for debugging purposes.
  #
  # source://yt-support//lib/yt/configuration.rb#45
  def log_level; end

  # @return [String] the level of output to print for debugging purposes.
  #
  # source://yt-support//lib/yt/configuration.rb#45
  def log_level=(_arg0); end

  # @return [String] the token to refresh an expired access token.
  #
  # source://yt-support//lib/yt/configuration.rb#51
  def refresh_token; end

  # @return [String] the token to refresh an expired access token.
  #
  # source://yt-support//lib/yt/configuration.rb#51
  def refresh_token=(_arg0); end
end

# A wrapper around StandardError.
#
# source://yt-support//lib/yt/connection_error.rb#3
class Yt::ConnectionError < ::StandardError; end

# A wrapper around StandardError.
#
# source://yt-support//lib/yt/http_error.rb#3
class Yt::HTTPError < ::StandardError
  # @return [HTTPError] a new instance of HTTPError
  #
  # source://yt-support//lib/yt/http_error.rb#6
  def initialize(msg, response:); end

  # Returns the value of attribute response.
  #
  # source://yt-support//lib/yt/http_error.rb#4
  def response; end
end

# A wrapper around +Net::HTTP+ to send HTTP requests to any web API and
# return their result or raise an error if the result is unexpected.
# The basic way to use Request is by calling +run+ on an instance.
#
# @api private
# @example List the most popular videos on YouTube.
#   host = ''www.googleapis.com'
#   path = '/youtube/v3/videos'
#   params = {chart: 'mostPopular', key: ENV['API_KEY'], part: 'snippet'}
#   response = Yt::Request.new(path: path, params: params).run
#   response.body['items'].map{|video| video['snippet']['title']}
#
# source://yt-support//lib/yt/http_request.rb#17
class Yt::HTTPRequest
  # Initializes a Request object.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the options for the request.
  # @return [HTTPRequest] a new instance of HTTPRequest
  #
  # source://yt-support//lib/yt/http_request.rb#33
  def initialize(options = T.unsafe(nil)); end

  # Sends the request and returns the response with the body parsed from JSON.
  #
  # @api private
  # @raise [Yt::HTTPError] if the request fails.
  # @return [Net::HTTPResponse] if the request succeeds.
  #
  # source://yt-support//lib/yt/http_request.rb#47
  def run; end

  private

  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#88
  def as_curl; end

  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#74
  def camelize(part); end

  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#149
  def error_message; end

  # @api private
  # @return [Net::HTTPRequest] the full HTTP request object,
  #   inclusive of headers of request body.
  #
  # source://yt-support//lib/yt/http_request.rb#80
  def http_request; end

  # Replaces the body of the response with the parsed version of the body,
  # according to the format specified in the HTTPRequest.
  #
  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#143
  def parse_response!; end

  # Equivalent to @params.transform_keys{|key| key.to_s.camelize :lower}
  #
  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#66
  def query; end

  # Run the request and memoize the response or the server error received.
  #
  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#123
  def response; end

  # Returns the list of server errors worth retrying the request once.
  #
  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#133
  def server_errors; end

  # Adds the request body to the request in the appropriate format.
  # if the request body is a JSON Object, transform its keys into camel-case,
  # since this is the common format for JSON APIs.
  #
  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#100
  def set_request_body!(request); end

  # Adds the request headers to the request in the appropriate format.
  # The User-Agent header is also set to recognize the request, and to
  # tell the server that gzip compression can be used, since Net::HTTP
  # supports it and automatically sets the Accept-Encoding header.
  #
  # @api private
  #
  # source://yt-support//lib/yt/http_request.rb#113
  def set_request_headers!(request); end

  # @api private
  # @return [URI::HTTPS] the (memoized) URI of the request.
  #
  # source://yt-support//lib/yt/http_request.rb#60
  def uri; end
end
