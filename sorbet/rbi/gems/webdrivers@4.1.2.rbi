# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `webdrivers` gem.
# Please instead update this file by running `bin/tapioca gem webdrivers`.

# Code adapted from Selenium Implementation
# https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/logger.rb
#
# source://webdrivers//lib/webdrivers/logger.rb#9
module Webdrivers
  class << self
    # Returns the amount of time (Seconds) the gem waits between two update checks.
    # are set, it defaults to 86,400 Seconds (24 hours).
    #
    # @note Value from the environment variable "WD_CACHE_TIME" takes precedence over Webdrivers.cache_time. If neither
    #
    # source://webdrivers//lib/webdrivers/common.rb#36
    def cache_time; end

    # Sets the attribute cache_time
    #
    # @param value the value to set the attribute cache_time to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#29
    def cache_time=(_arg0); end

    # Provides a convenient way to configure the gem.
    #
    # @example Configure proxy and cache_time
    #   Webdrivers.configure do |config|
    #   config.proxy_addr = 'myproxy_address.com'
    #   config.proxy_port = '8080'
    #   config.proxy_user = 'username'
    #   config.proxy_pass = 'password'
    #   config.cache_time = 604_800 # 7 days
    #   end
    # @yield [_self]
    # @yieldparam _self [Webdrivers] the object that the method was called on
    #
    # source://webdrivers//lib/webdrivers/common.rb#65
    def configure; end

    # Returns the install (download) directory path for the drivers.
    #
    # @return [String]
    #
    # source://webdrivers//lib/webdrivers/common.rb#45
    def install_dir; end

    # Sets the attribute install_dir
    #
    # @param value the value to set the attribute install_dir to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#29
    def install_dir=(_arg0); end

    # source://webdrivers//lib/webdrivers/common.rb#49
    def logger; end

    # source://webdrivers//lib/webdrivers/common.rb#69
    def net_http_ssl_fix; end

    # Returns the value of attribute proxy_addr.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_addr; end

    # Sets the attribute proxy_addr
    #
    # @param value the value to set the attribute proxy_addr to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_addr=(_arg0); end

    # Returns the value of attribute proxy_pass.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_pass; end

    # Sets the attribute proxy_pass
    #
    # @param value the value to set the attribute proxy_pass to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_pass=(_arg0); end

    # Returns the value of attribute proxy_port.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_port; end

    # Sets the attribute proxy_port
    #
    # @param value the value to set the attribute proxy_port to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_port=(_arg0); end

    # Returns the value of attribute proxy_user.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_user; end

    # Sets the attribute proxy_user
    #
    # @param value the value to set the attribute proxy_user to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#28
    def proxy_user=(_arg0); end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#21
class Webdrivers::BrowserNotFound < ::StandardError; end

# @api private
#
# source://webdrivers//lib/webdrivers/chrome_finder.rb#7
class Webdrivers::ChromeFinder
  class << self
    # @api private
    # @raise [BrowserNotFound]
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#17
    def location; end

    # @api private
    # @raise [VersionError]
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#9
    def version; end

    private

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#68
    def linux_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#86
    def linux_version(location); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#53
    def mac_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#90
    def mac_version(location); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#26
    def user_defined_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#38
    def win_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/chrome_finder.rb#82
    def win_version(location); end
  end
end

# source://webdrivers//lib/webdrivers/chromedriver.rb#8
class Webdrivers::Chromedriver < ::Webdrivers::Common
  class << self
    # Returns url with domain for calls to get this driver.
    #
    # @return [String]
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#54
    def base_url; end

    # Returns currently installed Chrome/Chromium version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#45
    def browser_version; end

    # Returns currently installed Chrome/Chromium version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#45
    def chrome_version; end

    # Returns current chromedriver version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#14
    def current_version; end

    # Returns latest available chromedriver version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#29
    def latest_version; end

    private

    # source://webdrivers//lib/webdrivers/chromedriver.rb#86
    def download_url; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#82
    def file_name; end

    # source://webdrivers//lib/webdrivers/chromedriver.rb#60
    def latest_point_release(version); end

    # Returns release version from the currently installed Chrome version
    #
    # @example
    #   73.0.3683.75 -> 73.0.3683
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#105
    def release_version; end

    # @return [Boolean]
    #
    # source://webdrivers//lib/webdrivers/chromedriver.rb#110
    def sufficient_binary?; end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#75
class Webdrivers::Common
  class << self
    # Returns path to the driver binary.
    #
    # @return [String]
    #
    # source://webdrivers//lib/webdrivers/common.rb#116
    def driver_path; end

    # Deletes the existing driver binary.
    #
    # source://webdrivers//lib/webdrivers/common.rb#105
    def remove; end

    # Returns the user defined required version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/common.rb#83
    def required_version; end

    # Sets the attribute required_version
    #
    # @param value the value to set the attribute required_version to.
    #
    # source://webdrivers//lib/webdrivers/common.rb#77
    def required_version=(_arg0); end

    # Triggers an update check.
    #
    # @return [String] Path to the driver binary.
    #
    # source://webdrivers//lib/webdrivers/common.rb#91
    def update; end

    private

    # source://webdrivers//lib/webdrivers/common.rb#152
    def binary_version; end

    # @return [Boolean]
    #
    # source://webdrivers//lib/webdrivers/common.rb#134
    def correct_binary?; end

    # source://webdrivers//lib/webdrivers/common.rb#122
    def download_url; end

    # @return [Boolean]
    #
    # source://webdrivers//lib/webdrivers/common.rb#130
    def exists?; end

    # source://webdrivers//lib/webdrivers/common.rb#148
    def normalize_version(version); end

    # @return [Boolean]
    #
    # source://webdrivers//lib/webdrivers/common.rb#144
    def sufficient_binary?; end

    # source://webdrivers//lib/webdrivers/common.rb#161
    def with_cache(file_name); end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#12
class Webdrivers::ConnectionError < ::StandardError; end

# 24 hours
#
# source://webdrivers//lib/webdrivers/common.rb#24
Webdrivers::DEFAULT_CACHE_TIME = T.let(T.unsafe(nil), Integer)

# source://webdrivers//lib/webdrivers/common.rb#25
Webdrivers::DEFAULT_INSTALL_DIR = T.let(T.unsafe(nil), String)

# @api private
#
# source://webdrivers//lib/webdrivers/edge_finder.rb#7
class Webdrivers::EdgeFinder
  class << self
    # @api private
    # @raise [BrowserNotFound]
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#17
    def location; end

    # @api private
    # @raise [VersionError]
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#9
    def version; end

    private

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#67
    def linux_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#75
    def linux_version(location); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#52
    def mac_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#79
    def mac_version(location); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#26
    def user_defined_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#38
    def win_location; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/edge_finder.rb#71
    def win_version(location); end
  end
end

# source://webdrivers//lib/webdrivers/edgedriver.rb#9
class Webdrivers::Edgedriver < ::Webdrivers::Chromedriver
  class << self
    # Returns url with domain for calls to get this driver.
    #
    # @return [String]
    #
    # source://webdrivers//lib/webdrivers/edgedriver.rb#24
    def base_url; end

    # Returns currently installed Edge version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/edgedriver.rb#16
    def browser_version; end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#29
    def remove; end

    private

    # source://webdrivers//lib/webdrivers/edgedriver.rb#73
    def download_url; end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#49
    def failed_to_find_message(version); end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#69
    def file_name; end

    # source://webdrivers//lib/webdrivers/edgedriver.rb#35
    def latest_point_release(version); end
  end
end

# source://webdrivers//lib/webdrivers/geckodriver.rb#7
class Webdrivers::Geckodriver < ::Webdrivers::Common
  class << self
    # Returns url with domain for calls to get this driver.
    #
    # @return [String]
    #
    # source://webdrivers//lib/webdrivers/geckodriver.rb#35
    def base_url; end

    # Returns current geckodriver version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/geckodriver.rb#13
    def current_version; end

    # Returns latest available geckodriver version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/geckodriver.rb#27
    def latest_version; end

    private

    # source://webdrivers//lib/webdrivers/geckodriver.rb#53
    def direct_url(version); end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#45
    def download_url; end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#41
    def file_name; end

    # source://webdrivers//lib/webdrivers/geckodriver.rb#57
    def platform_ext; end
  end
end

# source://webdrivers//lib/webdrivers/iedriver.rb#8
class Webdrivers::IEdriver < ::Webdrivers::Common
  class << self
    # Returns url with domain for calls to get this driver.
    #
    # @return [String]
    #
    # source://webdrivers//lib/webdrivers/iedriver.rb#36
    def base_url; end

    # Returns current IEDriverServer.exe version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/iedriver.rb#14
    def current_version; end

    # Returns latest available IEDriverServer.exe version.
    #
    # @return [Gem::Version]
    #
    # source://webdrivers//lib/webdrivers/iedriver.rb#28
    def latest_version; end

    private

    # source://webdrivers//lib/webdrivers/iedriver.rb#46
    def downloads; end

    # source://webdrivers//lib/webdrivers/iedriver.rb#42
    def file_name; end
  end
end

# @example Enable full logging
#   Webdrivers.logger.level = :debug
# @example Log to file
#   Webdrivers.logger.output = 'webdrivers.log'
# @example Use logger manually
#   Webdrivers.logger.info('This is info message')
#   Webdrivers.logger.warn('This is warning message')
#
# source://webdrivers//lib/webdrivers/logger.rb#21
class Webdrivers::Logger
  include ::Logger::Severity
  extend ::Forwardable

  # @return [Logger] a new instance of Logger
  #
  # source://webdrivers//lib/webdrivers/logger.rb#32
  def initialize; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def debug(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def debug?(*args, &block); end

  # Marks code as deprecated with replacement.
  #
  # @param old [String]
  # @param new [String]
  #
  # source://webdrivers//lib/webdrivers/logger.rb#94
  def deprecate(old, new); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def error(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def error?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def fatal(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def fatal?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def info(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def info?(*args, &block); end

  # Returns IO object used by logger internally.
  #
  # Normally, we would have never needed it, but we want to
  # use it as IO object for all child processes to ensure their
  # output is redirected there.
  #
  # It is only used in debug level, in other cases output is suppressed.
  #
  # @api private
  #
  # source://webdrivers//lib/webdrivers/logger.rb#84
  def io; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def level(*args, &block); end

  # For Ruby < 2.3 compatibility
  # Based on https://github.com/ruby/ruby/blob/ruby_2_3/lib/logger.rb#L250
  #
  # source://webdrivers//lib/webdrivers/logger.rb#50
  def level=(severity); end

  # source://webdrivers//lib/webdrivers/logger.rb#36
  def output=(io); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def warn(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def warn?(*args, &block); end

  private

  # source://webdrivers//lib/webdrivers/logger.rb#100
  def create_logger(output); end
end

# @api private
#
# source://webdrivers//lib/webdrivers/network.rb#7
class Webdrivers::Network
  class << self
    # @api private
    #
    # source://webdrivers//lib/webdrivers/network.rb#9
    def get(url, limit = T.unsafe(nil)); end

    # @api private
    # @raise [ConnectionError]
    #
    # source://webdrivers//lib/webdrivers/network.rb#27
    def get_response(url, limit = T.unsafe(nil)); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/network.rb#21
    def get_url(url, limit = T.unsafe(nil)); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/network.rb#47
    def http; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/network.rb#56
    def using_proxy; end
  end
end

# source://webdrivers//lib/webdrivers/common.rb#18
class Webdrivers::NetworkError < ::StandardError; end

# source://webdrivers//lib/webdrivers/railtie.rb#7
class Webdrivers::Railtie < ::Rails::Railtie; end

# @api private
#
# source://webdrivers//lib/webdrivers/system.rb#11
class Webdrivers::System
  class << self
    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#143
    def bitsize; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#33
    def cache_version(file_name, version); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#41
    def cached_version(file_name); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#147
    def call(process, arg = T.unsafe(nil)); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#85
    def decompress_file(tempfile, file_name, target); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#13
    def delete(file); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#52
    def download(url, target); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#62
    def download_file(url, target); end

    # @api private
    # @return [Boolean]
    #
    # source://webdrivers//lib/webdrivers/system.rb#79
    def exists?(file); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#29
    def install_dir; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#131
    def platform; end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#101
    def untarbz2_file(filename); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#107
    def untargz_file(source, target); end

    # @api private
    #
    # source://webdrivers//lib/webdrivers/system.rb#118
    def unzip_file(filename, driver_name); end

    # @api private
    # @return [Boolean]
    #
    # source://webdrivers//lib/webdrivers/system.rb#45
    def valid_cache?(file_name); end
  end
end

# source://webdrivers//lib/webdrivers/version.rb#4
Webdrivers::VERSION = T.let(T.unsafe(nil), String)

# source://webdrivers//lib/webdrivers/common.rb#15
class Webdrivers::VersionError < ::StandardError; end
